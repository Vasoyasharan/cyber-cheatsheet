import { useState } from 'react';
import { motion } from 'framer-motion';
import { FaChevronDown, FaCloud, FaInfoCircle } from 'react-icons/fa';
import ReactMarkdown from 'react-markdown';
import { copyToClipboard } from '../../utils/copyToClipboard';
import { toast } from 'react-toastify';

const CloudPentesting = () => {
  const [expandedSection, setExpandedSection] = useState('aws');

  const toggleSection = (section) => {
    setExpandedSection(expandedSection === section ? null : section);
  };

  const handleCopy = (command) => {
    copyToClipboard(command);
    toast.success('Command copied to clipboard!');
  };

  const sections = [
    {
      id: 'aws',
      title: 'AWS Security',
      content: [
        {
          type: 'markdown',
          value: `### Reconnaissance
\`\`\`bash
# List all resources
aws sts get-caller-identity
aws ec2 describe-instances
aws s3 ls
aws iam list-users

# Enumerate permissions
aws iam list-user-policies --user-name target-user
aws iam list-attached-user-policies --user-name target-user
aws iam list-groups-for-user --user-name target-user

# Check for misconfigured S3 buckets
aws s3api get-bucket-acl --bucket target-bucket
aws s3api get-bucket-policy --bucket target-bucket
\`\`\``
        },
        {
          type: 'markdown',
          value: `### Privilege Escalation
\`\`\`bash
# Check for privilege escalation opportunities
aws iam list-policies --query 'Policies[?PolicyName==\\\`AdministratorAccess\\\`]'
aws iam get-policy-version --policy-arn arn:aws:iam::aws:policy/AdministratorAccess --version-id v1

# Common risky permissions:
- iam:PutUserPolicy
- iam:AttachUserPolicy
- iam:CreateAccessKey
- lambda:CreateFunction
- cloudformation:CreateStack
\`\`\``

        },
        {
          type: 'markdown',
          value: `### Pacu Usage
\`\`\`bash
# Install and run
git clone https://github.com/RhinoSecurityLabs/pacu
python3 pacu.py

# Common modules
run iam__enum_permissions
run iam__privesc_scan
run s3__bucket_dump
run lambda__enum
\`\`\``
        }
      ]
    },
    {
      id: 'azure',
      title: 'Azure Security',
      content: [
        {
          type: 'markdown',
          value: `### Reconnaissance
\`\`\`powershell
# Connect to Azure
Connect-AzAccount

# List resources
Get-AzResource
Get-AzVM
Get-AzStorageAccount
Get-AzKeyVault

# Enumerate permissions
Get-AzRoleAssignment
Get-AzADUser -UserPrincipalName target@domain.com
Get-AzADUser -UserPrincipalName target@domain.com | Get-AzRoleAssignment
\`\`\``
        },
        {
          type: 'markdown',
          value: `### Privilege Escalation
\`\`\`powershell
# Check for Global Admin
Get-AzRoleDefinition -Name "Owner"
Get-AzRoleAssignment -RoleDefinitionName "Owner"

# Check for Key Vault access
Get-AzKeyVault
Get-AzKeyVaultSecret -VaultName target-vault

# Dangerous permissions:
- Microsoft.Authorization/roleAssignments/write
- Microsoft.Resources/subscriptions/resourceGroups/write
- Microsoft.Compute/virtualMachines/extensions/write
\`\`\``
        },
        {
          type: 'markdown',
          value: `### MicroBurst Usage
\`\`\`powershell
# Import module
Import-Module .\\MicroBurst.psm1

# Common functions
Invoke-EnumerateAzureBlobs -Base company
Invoke-EnumerateAzureSubDomains -Base company
Get-AzurePasswords -Verbose
\`\`\``
        }
      ]
    },
    {
      id: 'gcp',
      title: 'GCP Security',
      content: [
        {
          type: 'markdown',
          value: `### Reconnaissance
\`\`\`bash
# List resources
gcloud projects list
gcloud compute instances list
gcloud storage buckets list
gcloud iam service-accounts list

# Check permissions
gcloud projects get-iam-policy project-id
gcloud organizations get-iam-policy organization-id
\`\`\``
        },
        {
          type: 'markdown',
          value: `### Privilege Escalation
\`\`\`bash
# Check for org-level permissions
gcloud organizations get-iam-policy organization-id | grep -E "owner|editor|admin"

# Dangerous roles:
- roles/owner
- roles/editor
- roles/iam.securityAdmin
- roles/iam.serviceAccountAdmin
- roles/resourcemanager.projectIamAdmin
\`\`\``
        },
        {
          type: 'markdown',
          value: `### ScoutSuite Usage
\`\`\`bash
# Install and run
git clone https://github.com/nccgroup/ScoutSuite
python3 scout.py gcp --user-account

# View results
python3 -m http.server 8000 -d scoutsuite-report
\`\`\``
        }
      ]
    },
    {
      id: 'misconfigs',
      title: 'Common Misconfigurations',
      content: [
        {
          type: 'markdown',
          value: `### AWS
\`\`\`markdown
- **Public S3 Buckets**: 
  - Check for List/Get permissions for "Everyone" or "Authenticated Users"
  
- **Overprivileged IAM Roles**: 
  - Roles with AdministratorAccess or wildcard permissions (*)
  
- **Exposed Access Keys**: 
  - Check GitHub, public code repositories for hardcoded keys
  
- **Unrestricted Security Groups**: 
  - 0.0.0.0/0 allowed on sensitive ports (22, 3389, 3306)
\`\`\``
        },
        {
          type: 'markdown',
          value: `### Azure
\`\`\`markdown
- **Overprivileged Service Principals**: 
  - Service principals with Owner/Contributor roles
  
- **Unprotected Storage Accounts**: 
  - Containers set to "Blob" or "Container" access
  
- **Exposed Credentials**: 
  - ARM templates with hardcoded secrets
  
- **Lack of MFA**: 
  - Users without MFA enabled, especially admins
\`\`\``
        },
        {
          type: 'markdown',
          value: `### GCP
\`\`\`markdown
- **Default Service Accounts**: 
  - Using default compute engine service accounts with Editor role
  
- **Public Datasets**: 
  - BigQuery datasets with public access
  
- **Legacy Auth**: 
  - Allowing basic authentication for APIs
  
- **Overprivileged APIs**: 
  - Enabled APIs that aren't being used (e.g., Cloud SQL Admin API)
\`\`\``
        }
      ]
    }
  ];

  return (
    <div className="cheatsheet-container">
      <h2 className="cheatsheet-title">
        <FaCloud /> Cloud Pentesting (AWS/Azure/GCP)
      </h2>
      
      <div className="info-banner">
        <FaInfoCircle />
        <p>
          Comprehensive guide to cloud security testing covering AWS, Azure, and GCP.
          Includes reconnaissance techniques, privilege escalation paths, and common misconfigurations.
        </p>
      </div>
      
      <div className="sections-container">
        {sections.map((section) => (
          <div key={section.id} className="section">
            <motion.div
              className="section-header"
              onClick={() => toggleSection(section.id)}
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
            >
              <h3>{section.title}</h3>
              <motion.div
                animate={{ rotate: expandedSection === section.id ? 180 : 0 }}
              >
                <FaChevronDown />
              </motion.div>
            </motion.div>
            
            <motion.div
              className="section-content"
              initial={{ opacity: 0, height: 0 }}
              animate={{
                opacity: expandedSection === section.id ? 1 : 0,
                height: expandedSection === section.id ? 'auto' : 0
              }}
              transition={{ duration: 0.3 }}
            >
              {expandedSection === section.id && (
                <div className="content-inner">
                  {section.content.map((item, index) => (
                    <div key={index} className="content-item">
                      {item.type === 'command' ? (
                        <div className="command-item">
                          <div className="command-header">
                            <code>{item.value}</code>
                            <button
                              onClick={() => handleCopy(item.value)}
                              className="copy-button small"
                            >
                              Copy
                            </button>
                          </div>
                          <p className="command-description">{item.description}</p>
                        </div>
                      ) : (
                        <div className="markdown-content">
                          <ReactMarkdown>
                            {item.value}
                          </ReactMarkdown>
                          <button
                            onClick={() => handleCopy(item.value.replace(/```[a-z]*\n/, '').replace(/\n```/, ''))}
                            className="copy-button"
                          >
                            Copy All
                          </button>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              )}
            </motion.div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default CloudPentesting;